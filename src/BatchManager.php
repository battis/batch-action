<?php
	
namespace Battis\BatchAction;

/**
 * Manages a collection of Actions, executing them in batches (optionally
 * filtered by arbitrary criteria).
 *
 * @author Seth Battis <seth@battis.net>
 */
class BatchManager {
	
	/** @var Action[] The sequence of Actions*/
	private $sequence = array();
	
	/** @var mixed[] Sandboxes of variables generated by each run of the sequence of Actions */
	private $sandboxes = array();
	
	
	/**
	 * Add an action to the sequence
	 * 
	 * @param Action|Action[] $action
	 * @return void
	 */
	public function add() {
		$actions = func_get_args();
		foreach($actions as $action) {
			if (is_array($action)) {
				foreach ($action as $a) {
					$this->add($a);
				}
			} elseif ($action instanceof Action) {
				$this->sequence[] = $action;
			}
		}
	}
	
	/**
	 * Run the stored sequence of actions
	 *
	 * 
	 * 
	 * @param Filter $filter A filter to select actions from the saved sequence to
	 *		be run (default: `null`)
	 * @param bool $force Whether or not to force actions executed in previous runs
	 *		to be executed again in this run (default: `false`)
	 *
	 * @return Result[] The responses generated by each action that was executed in
	 *		this run, in the order executed
	 *
	 * @see BatchManager::preprocessAction() preprocessAction()
	 * @see BatchManager::postprocessResult() postprocessResult()
	 */
	public function run(Filter $filter = null, $force = false) {
		$id = md5(time());
		$environment = array();
		$sandbox = new Sandbox($id, $this->sequence, $filter, $forece, $environment);
		foreach($this->sequence as $action) {
			if ($filter === null || $filter->filter($action)) {
				try {
					$result = $this->preprocessAction($action)->run($environment, $id, $force);
					$result->setType(get_class($action));
					$sandbox->addResult($this->postprocessResult($result));
				} catch (Action_Exception $e) {
					throw new BatchManager_Exception(
						($force ? 'Forced run' : 'Run') . " (ID $id)" . (empty($tags) ? '' : ' with tags [' . implode(', ', $tags) . ']') . ' failed to complete: ' . $e->getMessage() . ' (Error ' . $e->getCode() . '), sandbox contents: ' . var_export($sandbox),
						BatchManager_Exception::ACTION_FAILED
					);
				}
			}
		}
		$this->sandboxes[$id] = $sandbox;
		return $sandbox->getResults();
	}
	
	/**
	 * Preprocess actions
	 * 
	 * An overrideable method that allows extensions of BatchManager to perform
	 * preprocessing of each action before it is executed (preprocessAction() is
	 * only called for actions which pass the filter, if the filter is present).
	 *
	 * @param Action $action
	 * @return Action
	 */
	protected function preprocessAction(Action $action) {
		return $action;
	}
	
	/**
	 * Postprocess results of actions
	 * 
	 * An overrideable method that allows extensions of BatchManager to perform
	 * postprocessing of each action's result before it is stored in the sandbox
	 * result sequence.
	 *
	 * @param Result $result
	 * @return void
	 */
	protected function postprocessResult(Result $result) {
		return $result;
	}
}