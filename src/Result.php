<?php

namespace Battis\BatchAction;

/**
 * Information about the result of an action
 *
 * This information is intended for both debugging purposes and to be
 * human-readable for feedback to end-users.
 *
 * @author Seth Battis <seth@battis.net>
 */
class Result {
	
	const SUCCESS = 'success';
	const INFO = 'info';
	const WARNING = 'warning';
	const DANGER = 'danger';
	
	/** @var string The type of Action*/
	private $class;
	
	/** @var string Title of human-readable feedback */
	private $title;
	
	/** @var string Human-readable feedback message */
	private $message;
	
	/**
	 * @var string Priority level of feedback. Recommended values are
	 *		`Result::SUCCESS`, `Result::INFO`, `Result::WARNING` or `Result::DANGER`
	 */
	private $level;
	
	/** @var boolean Whether or not the action completed*/
	private $complete;
	
	/** @var mixed Any data generated by the action */
	private $data;
	
	/**
	 * Construct a new result
	 * 
	 * @param string $class Type of Action
	 * @param string $title Human-readbale feedback title
	 * @param string $message Human-readable feedback message
	 * @param mixed $level Priority level of feedback (default: `Result::INFO`)
	 * @param bool $complete Whether or not the action completed (default: `true`)
	 * @param mixed $data Any data generated by the action (default: `null`)
	 */
	public function __construct($class, $title, $message = "", $level = self::INFO, $complete = true, $data = null) {
		$this->class = (string) $class;
		$this->title = (string) $title;
		$this->message = (string) $message;
		$this->level = (string) $level;
		$this->complete = (boolean) $complete;
		$this->data = $data;
	}
	
	/**
	 * Test a `Result` (or collection of results) for completion
	 *
	 * All results in the collection must be complete for the collection to be
	 * complete. The collection is traversed recursively.
	 * 
	 * @param Result|Result[] $results
	 *
	 * @return boolean
	 */
	public static function completed($results) {
		if (is_a($results, Result::class)) {
			return $results->isComplete();
		} elseif (is_array($results)) {
			$complete = true;
			foreach ($results as $result) {
				$complete &= static::completed($result);
			}
			return $complete;
		}
		return false;
	}
	
	/**
	 * Get type of action
	 * 
	 * @return string
	 */
	public function getClass() {
		return $this->class;
	}
	
	/**
	 * Get title of feedback
	 * 
	 * @return string
	 */
	public function getTitle() {
		return $this-title;
	}
	
	/**
	 * Get feedback message
	 * 
	 * @return string
	 */
	public function getMessage() {
		return $this->message;
	}
	
	/**
	 * Get level of feedback
	 * 
	 * @return string
	 */
	public function getLevel() {
		return $this->level;
	}
	
	/**
	 * Did the action run to completion?
	 * 
	 * @return boolean
	 */
	public function isComplete() {
		return $this->complete;
	}
	
	/**
	 * Get action-generated data
	 * 
	 * @return mixed
	 */
	public function getData() {
		return $this->data;
	}
}